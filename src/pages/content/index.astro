---
// Client-side script imports need to go in a client:* directive
import { getCollection } from 'astro:content';
import MainLayout from "@/layouts/MainLayout.astro";

interface Card {
  title: string;
  desc: string;
  img: string;
  alt: string;
  slug: string;
}

// Fetch content from the "contentCollection"
const content = await getCollection('content');
const cards: Card[] = content.map((item) => ({
  title: item.data.title,
  desc: item.data.desc,
  img: item.data.img.src,
  alt: item.data.img.src,
  slug: item.slug,
}));

const pageTitle: string = "Photography Content";
const description: string = "Building modern and fast web experiences with photography tutorials.";
---
<MainLayout title={pageTitle} description={description}>
  <div>
    {/* Hero Section */}
    <header class="hero-section">
      <div class="hero-content">
        <h2 class="text-4xl font-bold">Welcome to Photography Content</h2>
        <p class="mt-2 text-lg">Building modern and fast web experiences</p>
      </div>
    </header>

    {/* Search Bar */}
    <section class="max-w-[1400px] mx-auto px-4 pt-8">
      <div class="max-w-2xl mx-auto mb-12">
        <h2 class="text-3xl font-bold text-center mb-6">Photography</h2>
        <div class="relative">
          <input 
            type="text" 
            id="search"
            class="w-full py-3 px-4 pl-12 border border-gray-300 rounded-lg text-base focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 shadow-sm" 
            placeholder="Search tutorials..."
          />
          <svg class="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
      </div>
    </section>

    {/* Photo Grid */}
    <section class="max-w-[1400px] mx-auto px-4 py-8">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
        {cards.map((card, index) => (
          <div class="bg-white shadow-lg rounded-lg overflow-hidden transition-all duration-300 ease-in-out transform hover:-translate-y-2 hover:shadow-xl">
            <img src={card.img} alt={card.alt} class="w-full h-56 object-cover" />
            <div class="p-6 flex flex-col items-center">
              <h3 class="text-xl font-semibold">{card.title}</h3>
              <p class="text-gray-600 mt-3 mb-4">{card.desc}</p>
              <a href={`/content/${card.slug}`} class="read-more-btn">Read More</a>
            </div>
          </div>
        ))}
      </div>
    </section>

    {/* No Results Message */}
    <p id="no-results" class="hidden text-center py-8 text-xl text-gray-600 font-medium bg-gray-50 rounded-lg mx-4 my-6 shadow-inner">
      <span class="block text-3xl mb-2">üîç</span>
      No matching results found
    </p>
  </div>
</MainLayout>

<style>
  /* Hero Section Styles */
  .hero-section {
    @apply bg-cover bg-center py-16 text-center text-white;
    background-image: url("https://dfstudio-d420.kxcdn.com/wordpress/wp-content/uploads/2019/06/digital_camera_photo-1080x675.jpg");
  }
  .hero-content {
    @apply bg-black bg-opacity-50 px-4 py-16;
  }

  /* Read More Button Styles */
  .read-more-btn {
    @apply bg-blue-600 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 transform relative overflow-hidden border-2 border-transparent;
  }
  .read-more-btn:hover {
    @apply bg-white text-blue-600 border-blue-600 -translate-y-1 shadow-xl;
  }
  .read-more-btn:active {
    @apply scale-95;
  }
  .read-more-btn::before {
    @apply absolute top-0 left-0 w-full h-full bg-white scale-x-0 transition-transform duration-300 origin-left -z-10;
    content: '';
  }
  .read-more-btn:hover::before {
    @apply scale-x-100;
  }
</style>

<script>
  // Client-side search functionality
  const searchInput = document.getElementById("search");
  const cards = document.querySelectorAll(".grid > div");
  const noResults = document.getElementById("no-results");
  searchInput?.addEventListener("input", (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    let hasVisibleCards = false;
    cards.forEach((card) => {
      const title = card.querySelector("h3")?.textContent?.toLowerCase() || "";
      const desc = card.querySelector("p")?.textContent?.toLowerCase() || "";
      if (title.includes(searchTerm) || desc.includes(searchTerm)) {
        card.classList.remove("hidden");
        hasVisibleCards = true;
      } else {
        card.classList.add("hidden");
      }
    });
    // Toggle no results message
    if (noResults) {
      noResults.classList.toggle("hidden", hasVisibleCards);
    }
  });
</script>